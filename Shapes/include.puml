@startuml
abstract class Shape {
    + {abstract} Draw() : void
}
enum TriangleType {
    Isosceles=0,
    Rectangular=1,
    Obtuse,
    Echilateral,
}
class Cube {
    - {static} count : int = 1
    + CubeNr : int <<get>>
    + Cube()
    + Cube(length:double)
    + Cube(a:Point, b:Point)
    + <<override>> Draw() : void
    + <<new>> DisplayShape() : void
}
Cuboid <|-- Cube
Cube --> "A" Point
Cube --> "B" Point
class Program {
    {static} Main(args:string[]) : void
    {static} Display() : void
}
class Point <<struct>> {
    + X : double
    + Y : double
    + Point(x:double, y:double)
}
class Distance {
    + Distance()
    + Distance(A:Point, B:Point)
    + distance() : double
}
Distance --> "A" Point
Distance --> "B" Point
class TriangleWithSides {
    - {static} count : int = 1
    - TriangleNr : int <<get>>
    + TriangleWithSides()
    + TriangleWithSides(side1:double, side2:double, side3:double)
    + TriangleWithSides(A:Point, B:Point, C:Point)
    - S : double <<get>>
    + Area() : double
    + <<new>> DisplayShape() : void
}
Triangle <|-- TriangleWithSides
class TriangleWithAngle {
    + Angle : double <<get>> <<set>>
    - {static} count : int = 1
    - TriangleNr : int <<get>>
    + TriangleWithAngle()
    + TriangleWithAngle(side1:double, side2:double, angle:double)
    + TriangleWithAngle(A:Point, B:Point, C:Point)
    + LokalArea() : double
    + area : double <<get>>
    + <<new>> DisplayShape() : void
}
TriangleWithSides <|-- TriangleWithAngle
class Rectangle {
    + Width : double <<get>> <<set>>
    + Length : double <<get>> <<set>>
    - {static} count : int = 1
    + RectangleNr : int <<get>>
    + Rectangle()
    + Rectangle(width:double, length:double)
    + Rectangle(A:Point, B:Point, D:Point)
    + <<override>> Draw() : void
    + Area() : double
    + Perimeter() : double
    + Diagonal() : double
    + DisplayShape() : void
}
Shape <|-- Rectangle
IShapeInfo <|-- Rectangle
class Cuboid {
    + Length : double <<get>> <<set>>
    + Breadth : double <<get>> <<set>>
    + Height : double <<get>> <<set>>
    - {static} count : int = 1
    + CuboidNr : int <<get>>
    + Cuboid()
    + Cuboid(length:double, bradth:double, height:double)
    + Cuboid(A:Point, B:Point, C:Point, F:Point)
    + Area() : double
    + Volume() : double
    + <<override>> Draw() : void
    + DisplayShape() : void
}
Shape <|-- Cuboid
IShapeInfo <|-- Cuboid
Cuboid --> "InnerBaseLeftConner" Point
Cuboid --> "FrontBaseRightConner" Point
Cuboid --> "InnerBaseRightConner" Point
Cuboid --> "InnerTopRightConner" Point
class Hemisphere {
    + HemisphereNr : int <<get>>
    - {static} count : int = 1
    + Hemisphere()
    + Hemisphere(Center:Point, Edge:Point)
    + Hemisphere(Radius:double)
    + <<override>> Draw() : void
    + Area() : double
    + CurvedArea() : double
    + Volume() : double
    + <<new>> DisplayShape() : void
}
Sphere <|-- Hemisphere
class UnitExplanation <<static>> {
    + {static} Units() : void
}
class Square {
    - {static} count : int = 1
    + SquareNr : int <<get>>
    + Square()
    + Square(A:Point, B:Point)
    + Square(side:double)
    + <<new>> Draw() : void
    + <<new>> DisplayShape() : void
}
Rectangle <|-- Square
class Cylinder {
    + Height : double <<get>> <<set>>
    - {static} count : int = 1
    + CylinderNr : int <<get>>
    + Cylinder()
    + Cylinder(Radius:double, Height:double)
    + Cylinder(Center:Point, Edge:Point, CenterTop:Point)
    + <<override>> Draw() : void
    + <<new>> Area() : double
    + CurvedArea() : double
    + Volume() : double
    + <<new>> DisplayShape() : void
}
Circle <|-- Cylinder
IShapeInfo <|-- Cylinder
Cylinder --> "CenterTop" Point
interface IShapeInfo {
    DisplayShape() : void
}
class Cones {
    - {static} count : int = 1
    + Length : double <<get>> <<set>>
    + ConeNr : int <<get>>
    + Cones()
    + Cones(Radius:double, Height:double, Length:double)
    + Cones(Center:Point, Edge:Point, CenterTop:Point)
    + <<override>> Draw() : void
    + <<new>> Area() : double
    + <<new>> CurvedArea() : double
    + <<new>> Volume() : double
    + <<new>> DisplayShape() : void
}
Cylinder <|-- Cones
IShapeInfo <|-- Cones
class Angle {
    - Angulo : double
    + Angle(angulo:double)
    + angle() : double
}
class Circle {
    + Radius : double <<get>> <<set>>
    + CircleNr : int <<get>>
    - {static} count : int = 1
    + Circle()
    + Circle(center:Point, edge:Point)
    + Circle(Radius:double)
    + <<override>> Draw() : void
    + Area() : double
    + Perimeter() : double
    + DisplayShape() : void
}
Shape <|-- Circle
IShapeInfo <|-- Circle
Circle --> "Center" Point
Circle --> "Edge" Point
abstract class Triangle {
    + Side1 : double <<get>> <<set>>
    + Side2 : double <<get>> <<set>>
    + Side3 : double <<get>> <<set>>
    + Triangle()
    + Triangle(A:Point, B:Point, C:Point)
    + Triangle(side1:double, side2:double, side3:double)
    + <<override>> Draw() : void
    + Perimeter() : double
    + DisplayShape() : void
}
Shape <|-- Triangle
IShapeInfo <|-- Triangle
Triangle --> "Type" TriangleType
class Sphere {
    + Radius : double <<get>> <<set>>
    + SphereNr : int <<get>>
    - {static} count : int = 1
    + Sphere()
    + Sphere(Center:Point, Edge:Point)
    + Sphere(Radius:double)
    + <<override>> Draw() : void
    - Area() : double
    - Volume() : double
    + DisplayShape() : void
}
Shape <|-- Sphere
IShapeInfo <|-- Sphere
Sphere --> "Center" Point
Sphere --> "Edge" Point
@enduml
